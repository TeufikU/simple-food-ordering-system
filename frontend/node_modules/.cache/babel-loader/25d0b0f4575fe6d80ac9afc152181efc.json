{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\simple-food-ordering-system\\\\frontend\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport RestaurantsList from './RestaurantsList';\nimport Divider from '@material-ui/core/Divider';\nimport jwt_decode from 'jwt-decode';\nimport { getRestaurants } from './Services';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ReactDOM from 'react-dom';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this));\n    _this.state = {\n      fullname: '',\n      email: '',\n      restaurants: [],\n      openedRestaurants: []\n    };\n    return _this;\n  }\n  /*If dashboard is loaded then lets save a user data to local storage for later, so we know that the user is logged in*/\n\n\n  _createClass(Dashboard, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      if (localStorage.getItem('usertoken') !== null) {\n        var token = localStorage.usertoken;\n        var decoded = jwt_decode(token);\n        this.setState({\n          fullname: decoded.fullname,\n          email: decoded.email\n        });\n      }\n\n      var restaurants = {\n        name: '',\n        location: '',\n        workinghours: ''\n      };\n      getRestaurants(restaurants).then(function (res) {\n        if (res) {\n          _this2.setState({\n            restaurants: res\n          });\n        }\n      });\n      /*this.setState({restaurants:restaurants})*/\n\n      console.log(this.state);\n    }\n  }, {\n    key: \"createFoodOrder\",\n    value: function createFoodOrder(itemToBeDeleted) {\n      if (!this.state.openedRestaurants.includes(itemToBeDeleted)) {\n        this.setState({\n          openedRestaurants: this.state.openedRestaurants.concat(itemToBeDeleted)\n        });\n      }\n\n      console.log(this.state.openedRestaurants);\n      var element = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.state.openedRestaurants.map(function (number) {\n        return React.createElement(\"div\", {\n          className: \"panelRestaurantItem\",\n          key: number._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          \"aria-label\": \"Delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(DeleteIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        })), React.createElement(\"h2\", {\n          \"padding-bottom\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, number.name), React.createElement(\"form\", {\n          noValidate: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          spacing: 12,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          item: true,\n          xs: 11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          id: \"name\",\n          name: \"name\",\n          margin: \"normal\",\n          variant: \"standard\",\n          color: \"primary\",\n          placeholder: \"Name\",\n          fullWidth: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        })), React.createElement(Grid, {\n          item: true,\n          xs: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"close_icon\"))))));\n      }));\n      ReactDOM.render(element, document.getElementById('panels'));\n    }\n    /*Render DOM elements only if user is logged in, instead of that lets prompt that user needs to be logged in to view dashboard page*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (localStorage.getItem('usertoken') !== null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(Navbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"sidebar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"textAlignCenter bold\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"Restaurants\"), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(RestaurantsList, {\n          restaurants: this.state.restaurants,\n          createFoodOrder: this.createFoodOrder.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          id: \"panels\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"globalMessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"You must me logged in to view this page!\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Go to login page\"), React.createElement(Link, {\n          to: \"/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"Login\")));\n      }\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["C:\\Users\\User\\simple-food-ordering-system\\frontend\\src\\components\\Dashboard.js"],"names":["React","Component","Button","Link","Navbar","RestaurantsList","Divider","jwt_decode","getRestaurants","Grid","TextField","ReactDOM","IconButton","DeleteIcon","Dashboard","state","fullname","email","restaurants","openedRestaurants","localStorage","getItem","token","usertoken","decoded","setState","name","location","workinghours","then","res","console","log","itemToBeDeleted","includes","concat","element","map","number","_id","render","document","getElementById","createFoodOrder","bind"],"mappings":"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","sourcesContent":["    import React, { Component } from 'react'\r\n    import Button from '@material-ui/core/Button';\r\n    import { Link } from 'react-router-dom';\r\n    import Navbar from './Navbar';\r\n    import RestaurantsList from './RestaurantsList';\r\n    import Divider from '@material-ui/core/Divider';\r\n    import jwt_decode from 'jwt-decode'\r\n    import { getRestaurants } from './Services'\r\n    import Grid from '@material-ui/core/Grid';\r\n    import TextField from '@material-ui/core/TextField';\r\n    import ReactDOM from 'react-dom';\r\n    import IconButton from '@material-ui/core/IconButton';\r\n    import DeleteIcon from '@material-ui/icons/Delete';\r\n    class Dashboard extends Component {\r\n\r\n        constructor() {\r\n            super()\r\n            this.state = {\r\n                fullname: '',\r\n                email: '',\r\n                restaurants:[],\r\n                openedRestaurants:[]\r\n            }\r\n    \r\n\r\n        \r\n\r\n        }\r\n\r\n        /*If dashboard is loaded then lets save a user data to local storage for later, so we know that the user is logged in*/\r\n        componentWillMount () {\r\n            if(localStorage.getItem('usertoken')!==null){\r\n            const token = localStorage.usertoken\r\n            const decoded = jwt_decode(token)\r\n            this.setState({\r\n                fullname: decoded.fullname,\r\n                email: decoded.email,\r\n            })\r\n        }\r\n        \r\n        const restaurants=\r\n        {\r\n            name:'',\r\n            location: '',\r\n            workinghours: ''\r\n        }\r\n        \r\n        \r\n\r\n        getRestaurants(restaurants).then(res => {\r\n            if (res) {\r\n                this.setState({restaurants:res})\r\n\r\n               \r\n            }\r\n        })\r\n\r\n        /*this.setState({restaurants:restaurants})*/\r\n        console.log(this.state)\r\n    }\r\n\r\n        createFoodOrder (itemToBeDeleted) {\r\n            if(!this.state.openedRestaurants.includes(itemToBeDeleted)){\r\n            this.setState({ openedRestaurants: this.state.openedRestaurants.concat(itemToBeDeleted) })\r\n        }\r\n            console.log(this.state.openedRestaurants)\r\n            const element = (\r\n                <div>\r\n                {\r\n                    this.state.openedRestaurants.map((number) =>\r\n                <div className=\"panelRestaurantItem\" key={number._id}>\r\n                <IconButton  aria-label=\"Delete\">\r\n        <DeleteIcon />\r\n      </IconButton>\r\n                <h2 padding-bottom=\"true\">{number.name}</h2>\r\n                <form noValidate>\r\n                <Grid container spacing={12}>\r\n                    <Grid item xs={11}>\r\n                        <TextField\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            margin=\"normal\"\r\n                            variant=\"standard\"\r\n                            color=\"primary\"\r\n                            placeholder=\"Name\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\"><Icon>close_icon</Icon></Button>\r\n                    </Grid> \r\n                </Grid>  \r\n                </form>\r\n                </div>\r\n                    )}\r\n                </div> \r\n          );\r\n          ReactDOM.render(element, document.getElementById('panels'));\r\n           \r\n        }\r\n\r\n        /*Render DOM elements only if user is logged in, instead of that lets prompt that user needs to be logged in to view dashboard page*/\r\n        render () {\r\n            if(localStorage.getItem('usertoken')!==null){\r\n            return (\r\n            <div><Navbar />\r\n            <div className=\"sidebar\">\r\n            <h2 className=\"textAlignCenter bold\">Restaurants</h2>\r\n            <Divider />\r\n            <RestaurantsList restaurants={this.state.restaurants} createFoodOrder={this.createFoodOrder.bind(this)}/>\r\n            </div>\r\n            <div id=\"panels\"></div>\r\n            </div>   \r\n            )}else{\r\n                return(\r\n                    <div className=\"globalMessage\">\r\n                    <h1>You must me logged in to view this page!</h1> \r\n                    <p>Go to login page</p>\r\n                    <Link to=\"/login\"><Button variant=\"contained\" color=\"primary\">Login</Button></Link>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    export default Dashboard"]},"metadata":{},"sourceType":"module"}